package tw.holidaybear.pokedex.data.repository

import androidx.hilt.work.HiltWorker
import androidx.work.CoroutineWorker
import androidx.work.OneTimeWorkRequestBuilder
import androidx.work.WorkManager
import androidx.work.WorkerParameters
import androidx.work.workDataOf
import dagger.assisted.Assisted
import dagger.assisted.AssistedInject
import tw.holidaybear.pokedex.data.local.CaptureRecord
import tw.holidaybear.pokedex.data.local.CaptureRecordDao
import tw.holidaybear.pokedex.data.local.Pokemon
import tw.holidaybear.pokedex.data.local.PokemonDao
import tw.holidaybear.pokedex.data.local.PokemonType
import tw.holidaybear.pokedex.data.local.Type
import tw.holidaybear.pokedex.data.model.CapturedPokemon
import tw.holidaybear.pokedex.data.model.TypeWithCount
import tw.holidaybear.pokedex.data.remote.PokeApiService
import kotlinx.coroutines.flow.Flow

class PokemonRepository @AssistedInject constructor(
    private val pokeApiService: PokeApiService,
    private val pokemonDao: PokemonDao,
    private val captureRecordDao: CaptureRecordDao,
    @Assisted private val workManager: WorkManager
) {

    suspend fun fetchAndStorePokemonList() {
        val response = pokeApiService.getPokemonList(limit = 151)
        val pokemonList = response.results.map { item ->
            Pokemon(
                id = item.id,
                name = item.name,
                imageUrl = "", // Will be updated by Worker
                description = null, // Will be updated by Worker
                isProcessed = false
            )
        }
        pokemonList.forEach { pokemonDao.insertPokemon(it) }

        // Enqueue WorkManager tasks for processing each Pokemon
        pokemonList.forEach { pokemon ->
            val workRequest = OneTimeWorkRequestBuilder<PokemonDetailWorker>()
                .setInputData(workDataOf("POKEMON_ID" to pokemon.id))
                .build()
            workManager.enqueue(workRequest)
        }
    }

    fun getTypesWithCount(): Flow<List<TypeWithCount>> {
        return pokemonDao.getTypesWithCount()
    }

    fun getPokemonByType(typeId: Int): Flow<List<Pokemon>> {
        return pokemonDao.getPokemonByType(typeId)
    }

    fun getCapturedPokemon(): Flow<List<CapturedPokemon>> {
        return captureRecordDao.getCapturedPokemon()
    }

    suspend fun capturePokemon(pokemonId: Int, categoryType: String) {
        val captureRecord = CaptureRecord(
            captureId = 0, // Auto-generated by Room
            pokemonId = pokemonId,
            captureTimestamp = System.currentTimeMillis(),
            categoryType = categoryType
        )
        captureRecordDao.insertCapture(captureRecord)
    }

    suspend fun releasePokemon(captureId: Long) {
        captureRecordDao.deleteCapture(captureId)
    }
}

@HiltWorker
class PokemonDetailWorker @AssistedInject constructor(
    @Assisted context: android.content.Context,
    @Assisted params: WorkerParameters,
    private val pokeApiService: PokeApiService,
    private val pokemonDao: PokemonDao
) : CoroutineWorker(context, params) {

    override suspend fun doWork(): Result {
        val pokemonId = inputData.getInt("POKEMON_ID", -1)
        if (pokemonId == -1) return Result.failure()

        return try {
            val detailResponse = pokeApiService.getPokemonDetail(pokemonId)
            val imageUrl = detailResponse.sprites.other.officialArtwork.frontDefault

            val speciesResponse = pokeApiService.getPokemonSpecies(pokemonId)
            val description = speciesResponse.flavorTextEntries
                .firstOrNull { it.isEnglish() }
                ?.flavorText
                ?.replace("\n", " ") ?: ""

            detailResponse.types.forEachIndexed { index, pokemonType ->
                val typeName = pokemonType.type.name
                val typeId = pokemonId * 100 + index // Simple ID generation for demo
                pokemonDao.insertType(Type(id = typeId, name = typeName))
                pokemonDao.insertPokemonType(PokemonType(pokemonId = pokemonId, typeId = typeId))
            }

            pokemonDao.updatePokemonDetails(pokemonId, imageUrl, description)
            Result.success()
        } catch (e: Exception) {
            Result.retry()
        }
    }
}
